/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['object-settings.js']) {
  _$jscoverage['object-settings.js'] = [];
  _$jscoverage['object-settings.js'][8] = 0;
  _$jscoverage['object-settings.js'][11] = 0;
  _$jscoverage['object-settings.js'][14] = 0;
  _$jscoverage['object-settings.js'][17] = 0;
  _$jscoverage['object-settings.js'][27] = 0;
  _$jscoverage['object-settings.js'][28] = 0;
  _$jscoverage['object-settings.js'][31] = 0;
  _$jscoverage['object-settings.js'][45] = 0;
  _$jscoverage['object-settings.js'][46] = 0;
  _$jscoverage['object-settings.js'][55] = 0;
  _$jscoverage['object-settings.js'][56] = 0;
  _$jscoverage['object-settings.js'][60] = 0;
  _$jscoverage['object-settings.js'][63] = 0;
  _$jscoverage['object-settings.js'][64] = 0;
  _$jscoverage['object-settings.js'][65] = 0;
  _$jscoverage['object-settings.js'][69] = 0;
  _$jscoverage['object-settings.js'][71] = 0;
  _$jscoverage['object-settings.js'][74] = 0;
  _$jscoverage['object-settings.js'][75] = 0;
  _$jscoverage['object-settings.js'][80] = 0;
  _$jscoverage['object-settings.js'][90] = 0;
  _$jscoverage['object-settings.js'][91] = 0;
  _$jscoverage['object-settings.js'][99] = 0;
  _$jscoverage['object-settings.js'][109] = 0;
  _$jscoverage['object-settings.js'][114] = 0;
  _$jscoverage['object-settings.js'][115] = 0;
}
_$jscoverage['object-settings.js'][8]++;
require("abstract").createModel((function Settings(exports) {
  _$jscoverage['object-settings.js'][11]++;
  module.exports = exports;
  _$jscoverage['object-settings.js'][14]++;
  exports.mixin = require("abstract").utility.mixin.bind(this, this);
  _$jscoverage['object-settings.js'][17]++;
  exports.properties(exports.prototype, {get: (function get(key, fallback) {
  _$jscoverage['object-settings.js'][27]++;
  if ("undefined" === typeof key) {
    _$jscoverage['object-settings.js'][28]++;
    return this._meta || {};
  }
  _$jscoverage['object-settings.js'][31]++;
  return this._meta? this._meta[arguments[0]]: fallback || this._meta;
}), set: (function set(key, value) {
  _$jscoverage['object-settings.js'][45]++;
  if (! this._meta) {
    _$jscoverage['object-settings.js'][46]++;
    Object.defineProperty(this, "_meta", {value: {}, enumerable: false, writable: true, configurable: true});
  }
  _$jscoverage['object-settings.js'][55]++;
  if (! arguments) {
    _$jscoverage['object-settings.js'][56]++;
    return this;
  }
  _$jscoverage['object-settings.js'][60]++;
  var emit = this.emit? this.emit.bind(this): (function emit() {
});
  _$jscoverage['object-settings.js'][63]++;
  if (Object.keys(arguments).length === 2) {
    _$jscoverage['object-settings.js'][64]++;
    this._meta[arguments[0]] = arguments[1];
    _$jscoverage['object-settings.js'][65]++;
    emit(["set", arguments[0]], null, arguments[1], arguments[0]);
  }
  _$jscoverage['object-settings.js'][69]++;
  if (Object.keys(arguments).length === 1 && "object" === typeof arguments[0]) {
    _$jscoverage['object-settings.js'][71]++;
    require("util")._extend(this._meta, arguments[0]);
    _$jscoverage['object-settings.js'][74]++;
    for (var key in arguments[0]) {
      _$jscoverage['object-settings.js'][75]++;
      if (arguments[0].hasOwnProperty(key)) {
        _$jscoverage['object-settings.js'][75]++;
        emit(["set", key], null, arguments[0][key], key);
      }
}
  }
  _$jscoverage['object-settings.js'][80]++;
  return this;
}), enable: (function enable(key) {
  _$jscoverage['object-settings.js'][90]++;
  if (! this._meta) {
    _$jscoverage['object-settings.js'][91]++;
    Object.defineProperty(this, "_meta", {value: {}, enumerable: false, writable: true, configurable: true});
  }
  _$jscoverage['object-settings.js'][99]++;
  this._meta[key] = true;
}), disable: (function disable(key) {
  _$jscoverage['object-settings.js'][109]++;
  return this._meta? this._meta[key] = false: null;
})});
  _$jscoverage['object-settings.js'][114]++;
  exports.defineInstance((function (defaults) {
  _$jscoverage['object-settings.js'][115]++;
  this.set(defaults);
}));
}));
_$jscoverage['object-settings.js'].source = ["/**"," * Create custom objects and methods by aggregating and abstracting esources."," *"," * @version 0.1.0"," * @class Settings"," * @constractor"," */","require( 'abstract' ).createModel( function Settings( exports ) {","","  // Expose as module","  module.exports = exports;","","  // Constructor Properties","  exports.mixin = require( 'abstract' ).utility.mixin.bind( this, this )","","  // Prototypal Properties","  exports.properties( exports.prototype, {","    /**","     * Get or create and get storage","     *","     * @param key {String}","     * @returns {*|undefined}","     */","    get: function get( key, fallback ) {","","      // Return empty full meta object if no key specified","      if( 'undefined' === typeof key ) {","        return this._meta || {};","      }","","      return this._meta ? this._meta[ arguments[0] ] : fallback || this._meta;","","    },","    /**","     * Set Key &amp; Value pair, or pass an object","     *","     * @method key","     * @param key {String|Object}","     * @param value {Any}","     * @returns {Object} Context.","     */","    set: function set( key, value ) {","","      // Get or create and get storage","      if( !this._meta ) {","        Object.defineProperty( this, '_meta', {","          value: {},","          enumerable: false,","          writable: true,","          configurable: true","        });","      }","","      // Not passing any arguments can be used to instantiate","      if( !arguments ) {","        return this;","      }","","      // Wrapper for Emit","      var emit = this.emit ? this.emit.bind( this ) : function emit() {};","","      // Key &amp; Value Passed","      if( Object.keys( arguments ).length === 2 ) {","        this._meta[ arguments[0] ] = arguments[1];","        emit( [ 'set', arguments[0] ], null, arguments[1], arguments[0] );","      }","","      // Object Passed, extend","      if( Object.keys( arguments ).length === 1 &amp;&amp; 'object' === typeof arguments[0] ) {","","        require( 'util' )._extend( this._meta, arguments[0] );","","        // @todo Get object path using dot notation","        for( var key in arguments[0] ) {","          if( arguments[0].hasOwnProperty( key ) ) { emit( [ 'set', key ], null, arguments[0][key], key ); }","        }","","      }","","      return this;","","    },","    /**","     * Enable an Option","     *","     * @param key","     */","    enable: function enable( key ) {","","      if( !this._meta ) {","        Object.defineProperty( this, '_meta', {","          value: {},","          enumerable: false,","          writable: true,","          configurable: true","        });","      }","","      this._meta[ key ] = true;","","    },","    /**","     * Disable an Option","     *","     * @param key","     * @returns {boolean}","     */","    disable: function disable( key ) {","      return this._meta ? this._meta[ key ] = false : null;","    }","  });","","  // Define instance constructor and bind to module.exports","  exports.defineInstance( function( defaults ) {","    this.set( defaults );","  });","","});",""];
