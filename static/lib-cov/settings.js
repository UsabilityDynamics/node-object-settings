/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['settings.js']) {
  _$jscoverage['settings.js'] = [];
  _$jscoverage['settings.js'][11] = 0;
  _$jscoverage['settings.js'][12] = 0;
  _$jscoverage['settings.js'][15] = 0;
  _$jscoverage['settings.js'][43] = 0;
  _$jscoverage['settings.js'][44] = 0;
  _$jscoverage['settings.js'][47] = 0;
  _$jscoverage['settings.js'][48] = 0;
  _$jscoverage['settings.js'][49] = 0;
  _$jscoverage['settings.js'][54] = 0;
  _$jscoverage['settings.js'][62] = 0;
  _$jscoverage['settings.js'][66] = 0;
  _$jscoverage['settings.js'][67] = 0;
  _$jscoverage['settings.js'][70] = 0;
  _$jscoverage['settings.js'][78] = 0;
  _$jscoverage['settings.js'][79] = 0;
  _$jscoverage['settings.js'][81] = 0;
  _$jscoverage['settings.js'][93] = 0;
  _$jscoverage['settings.js'][96] = 0;
  _$jscoverage['settings.js'][99] = 0;
  _$jscoverage['settings.js'][100] = 0;
  _$jscoverage['settings.js'][101] = 0;
  _$jscoverage['settings.js'][105] = 0;
  _$jscoverage['settings.js'][106] = 0;
  _$jscoverage['settings.js'][109] = 0;
  _$jscoverage['settings.js'][110] = 0;
  _$jscoverage['settings.js'][115] = 0;
  _$jscoverage['settings.js'][127] = 0;
  _$jscoverage['settings.js'][173] = 0;
  _$jscoverage['settings.js'][181] = 0;
  _$jscoverage['settings.js'][201] = 0;
  _$jscoverage['settings.js'][203] = 0;
  _$jscoverage['settings.js'][205] = 0;
  _$jscoverage['settings.js'][206] = 0;
  _$jscoverage['settings.js'][211] = 0;
}
_$jscoverage['settings.js'][11]++;
function Settings(id, config, defaults) {
  _$jscoverage['settings.js'][12]++;
  Settings.debug("object-settings:constructor");
  _$jscoverage['settings.js'][15]++;
  Object.defineProperties(this, {_id: {value: id || this.constructor.name, configurable: true, enumerable: false, writable: true}, _namespace: {value: arguments.callee.name, configurable: true, enumerable: false, writable: true}, settings: {value: defaults || this.settings || {}, configurable: true, enumerable: false, writable: true}, config: {value: config || this.config || {}, configurable: true, enumerable: false, writable: true}});
  _$jscoverage['settings.js'][43]++;
  if (! (this instanceof arguments.callee)) {
    _$jscoverage['settings.js'][44]++;
    Settings.debug("Notce:", arguments.callee.name, "instantiated in", this.constructor.name, "context.");
    _$jscoverage['settings.js'][47]++;
    for (var name in arguments.callee.prototype) {
      _$jscoverage['settings.js'][48]++;
      Object.defineProperty(this, name, Object.getOwnPropertyDescriptor(arguments.callee.prototype, name));
}
    _$jscoverage['settings.js'][49]++;
    ;
  }
  _$jscoverage['settings.js'][54]++;
  return this;
}
_$jscoverage['settings.js'][62]++;
Object.defineProperties(Settings.prototype, {"id": {"value": {set: (function (name) {
  _$jscoverage['settings.js'][66]++;
  this._namespace = this._namespace || [];
  _$jscoverage['settings.js'][67]++;
  if (this._namespace.indexOf(name) < 0) {
    _$jscoverage['settings.js'][67]++;
    this._namespace.push(name);
  }
}), get: (function () {
  _$jscoverage['settings.js'][70]++;
  return this._namespace.join(".");
})}, "enumerable": true}, "namespace": {"value": {set: (function (id) {
  _$jscoverage['settings.js'][78]++;
  this._id = this._id || [];
  _$jscoverage['settings.js'][79]++;
  if (this._id.indexOf(id) < 0) {
    _$jscoverage['settings.js'][79]++;
    this._id.push(id);
  }
}), get: (function () {
  _$jscoverage['settings.js'][81]++;
  return this._id.join(".");
})}, "enumerable": true}, "set": {"value": (function set() {
  _$jscoverage['settings.js'][93]++;
  Settings.debug(arguments.callee.name);
  _$jscoverage['settings.js'][96]++;
  var emit = this.emit? this.emit.bind(this): (function emit() {
});
  _$jscoverage['settings.js'][99]++;
  if (Object.keys(arguments).length === 2) {
    _$jscoverage['settings.js'][100]++;
    this.settings[arguments[0]] = arguments[1];
    _$jscoverage['settings.js'][101]++;
    emit(["set", arguments[0]], null, arguments[1], arguments[0]);
  }
  _$jscoverage['settings.js'][105]++;
  if (Object.keys(arguments).length === 1 && "object" === typeof arguments[0]) {
    _$jscoverage['settings.js'][106]++;
    Settings.extend(this.settings, arguments[0]);
    _$jscoverage['settings.js'][109]++;
    for (var key in arguments[0]) {
      _$jscoverage['settings.js'][110]++;
      if (arguments[0].hasOwnProperty(key)) {
        _$jscoverage['settings.js'][110]++;
        emit(["set", key], null, arguments[0][key], key);
      }
}
  }
  _$jscoverage['settings.js'][115]++;
  return this;
}), "enumerable": true}, "get": {"value": (function get(name) {
  _$jscoverage['settings.js'][127]++;
  return this.settings[name] || undefined;
}), "enumerable": true}, "enable": {"value": (function enable(name) {
}), "enumerable": true}, "disable": {"value": (function disable(name) {
}), "enumerable": true}, "enabled": {"value": (function enabled(name) {
}), "enumerable": true}, "disabled": {"value": (function disabled(name) {
}), "enumerable": true}});
_$jscoverage['settings.js'][173]++;
Object.defineProperties(module.exports = Settings, {"create": {"value": (function create(name, config, defaults) {
  _$jscoverage['settings.js'][181]++;
  return new Settings(name, config, defaults);
}), "enumerable": true}, "debug": {"value": require("debug")("Settings"), "writable": false, "enumerable": false}, "extend": {"value": (function extend(target) {
  _$jscoverage['settings.js'][201]++;
  target = target? target: {};
  _$jscoverage['settings.js'][203]++;
  for (var index in arguments) {
    _$jscoverage['settings.js'][205]++;
    for (var key in arguments[index]) {
      _$jscoverage['settings.js'][206]++;
      target[key] = arguments[index][key];
}
}
  _$jscoverage['settings.js'][211]++;
  return target;
}), "enumerable": false}});
_$jscoverage['settings.js'].source = ["/**"," * Object Settings Module"," *"," * Create custom objects and methods by aggregating and abstracting esources."," *"," * @params options {Object} Configuration options for Settings Options instance."," * @version 0.0.1"," * @class Settings"," * @constractor"," */","function Settings( id, config, defaults ) {","  Settings.debug( 'object-settings:constructor' );","","  // Instance Properties","  Object.defineProperties( this, {","    _id: {","      value: id || this.constructor.name,","      configurable: true,","      enumerable: false,","      writable: true","    },","    _namespace: {","      value: arguments.callee.name,","      configurable: true,","      enumerable: false,","      writable: true","    },","    settings: {","      value: defaults || this.settings || {},","      configurable: true,","      enumerable: false,","      writable: true","    },","    config: {","      value: config || this.config || {},","      configurable: true,","      enumerable: false,","      writable: true","    },","  });","","  // Detect non-standard instantiation - not using \"new\"","  if( !( this instanceof arguments.callee ) ) {","    Settings.debug( 'Notce:', arguments.callee.name, 'instantiated in', this.constructor.name, 'context.' );","","    // Recover correct constructor prototype and expose","    for( var name in arguments.callee.prototype ) {","      Object.defineProperty( this, name, Object.getOwnPropertyDescriptor( arguments.callee.prototype, name ) );","    };","","  }","","  // Return context","  return this;","","}","","/**"," * Prototypal Properties"," *"," */","Object.defineProperties( Settings.prototype, {","  \"id\": {","    'value': {","      set: function( name ) {","        this._namespace = this._namespace || [];","        if( this._namespace.indexOf( name ) &lt; 0 ) { this._namespace.push( name ); }","      },","      get: function() {","        return this._namespace.join( '.' );","      }","    },","    'enumerable': true","  },","  \"namespace\": {","    'value': {","      set: function( id ) {","        this._id = this._id || [];","        if( this._id.indexOf( id ) &lt; 0 ) { this._id.push( id ); }","      },","      get: function() { return this._id.join( '.' ); }","    },","    'enumerable': true","  },","  \"set\": {","    /**","     * Set a key if a key and value are passed. If object is passed, extend it into settings object","     *","     * @returns {*}","     * @chainable","     */","    \"value\": function set() {","      Settings.debug( arguments.callee.name );","","      // Wrapper for Emit","      var emit = this.emit ? this.emit.bind( this ) : function emit() {};","","      // Key &amp; Value Passed","      if( Object.keys( arguments ).length === 2 ) {","        this.settings[ arguments[0] ] = arguments[1];","        emit( [ 'set', arguments[0] ], null, arguments[1], arguments[0] );","      }","","      // Object Passed, extend","      if( Object.keys( arguments ).length === 1 &amp;&amp; 'object' === typeof arguments[0] ) {","        Settings.extend( this.settings, arguments[0] );","","        // @todo Get object path using dot notation","        for( var key in arguments[0] ) {","          if( arguments[0].hasOwnProperty( key ) ) { emit( [ 'set', key ], null, arguments[0][key], key ); }","        }","","      }","","      return this;","","    },","    \"enumerable\": true","  },","  \"get\": {","    /**","     * Get the value for a particular key","     *","     * @param name {String}","     */","    \"value\": function get( name ) {","      return this.settings[ name ] || undefined;","    },","    \"enumerable\": true","  },","  \"enable\": {","    /**","     * Get the value for a particular key","     *","     * @param name {String}","     */","    \"value\": function enable( name ) {},","    \"enumerable\": true","  },","  \"disable\": {","    /**","     * Get the value for a particular key","     *","     * @param name {String}","     */","    \"value\": function disable( name ) {},","    \"enumerable\": true","  },","  \"enabled\": {","    /**","     * Get the value for a particular key","     *","     * @param name {String}","     */","    \"value\": function enabled( name ) {},","    \"enumerable\": true","  },","  \"disabled\": {","    /**","     * Get the value for a particular key","     *","     * @param name {String}","     */","    \"value\": function disabled( name ) {},","    \"enumerable\": true","  }","});","","/**"," * Constructor Properties"," *"," */","Object.defineProperties( module.exports = Settings, {","  \"create\": {","    /**","     * Create new Instance","     *","     * @params","     */","    \"value\": function create( name, config, defaults ) {","      return new Settings( name, config, defaults );","    },","    \"enumerable\": true","  },","  \"debug\": {","    /**","     * Debugger","     *","     */","    \"value\": require( 'debug' )( 'Settings' ),","    \"writable\": false,","    \"enumerable\": false","  },","  \"extend\": {","    /**","     * Extend Target with Source","     *","     */","    \"value\": function extend( target ) {","","      target = target ? target : {};","","      for( var index in arguments ) {","","        for( var key in arguments[ index ] ) {","          target[ key ] = arguments[ index ][ key ];","        }","","      }","","      return target;","","    },","    \"enumerable\": false","  }","});",""];
